# Simulations of Markson & Spelke (2006)
# Author: Deon T. Benton


#########################
#########################
## SIMULATIONS 1, 3, 5 ##
#########################
#########################

proc sim1 {} {
proc netSim1 {netName learningRate weightDecay learningRates wgtDecay} {
addNet $netName -i 3

# input groups
addGroup Slot 40 INPUT OUT_NOISE
addGroup Motion 35 INPUT OUT_NOISE
addGroup Animate_Features 1 INPUT OUT_NOISE
addGroup Unrelated_IN 2 INPUT OUT_NOISE

# hidden group (# there are necessarily fewer hidden units than there are input and output units)
# context group
addGroup context 20 ELMAN
addGroup hidden 20 RELU 

# noise parameters
noiseType Slot -range 0.1
noiseType Motion -range 0.1
noiseType Animate_Features -range 0.1
noiseType Unrelated_IN -range 0.1

# output group
addGroup Slot_OUT 40 OUTPUT
addGroup Motion_OUT 35 OUTPUT 
addGroup Animate_Features_OUT 1 OUTPUT
addGroup Unrelated_OUT 2 OUTPUT

# connect groups (input -> hidden -> output)
connectGroups {Slot Motion Animate_Features Unrelated_IN context} hidden {Slot_OUT Motion_OUT Animate_Features_OUT Unrelated_OUT}
elmanConnect hidden context


# training examples
loadExamples pretrain_100_0.ex -exmode ORD -mode REPLACE
loadExamples pretrain_90_10.ex -exmode ORD -mode REPLACE
loadExamples pretrain_80_20.ex -exmode ORD -mode REPLACE
loadExamples pretrain_70_30.ex -exmode ORD -mode REPLACE
loadExamples pretrain_60_40.ex -exmode ORD -mode REPLACE
loadExamples pretrain_50_50.ex -exmode ORD -mode REPLACE 

loadExamples exp1_fam.ex 
loadExamples exp2_fam.ex 
loadExamples exp2_delay.ex 
loadExamples exp3_fam.ex 
loadExamples exp4_fam.ex 
loadExamples exp5_fam.ex 
loadExamples exp6_fam.ex 

loadExamples exp1_test.ex 
loadExamples exp2_test.ex 
loadExamples exp3_test.ex 
loadExamples exp4_test.ex 
loadExamples exp5_test.ex 
loadExamples exp6_test.ex 



# set learning and display parameters
setObj learningRate $learningRate
setObj momentum	    0.9
setObj batchSize    0
setObj numUpdates   10
setObj reportInterval 1
setObj unitCellSize 20
setObj linkCellSize 10
setObj randRange 0.1
setObj weightDecay $weightDecay
setObj pseudoExampleFreq 1



#resetPlot 
#plotRow 6 b 5 n Motion_OUT 7
#plotRow 2 b 10 n Unrelated_OUT 2
#plotRow 6 b 2 n Slot_OUT 12
#plotRow 4 b 6 n hidden 6
#plotRow 4 b 8 n context 6
#plotRow 6 b 5 n Motion 7
#plotRow 2 b 10 n Unrelated_IN 2
#plotRow 6 b 2 n Slot 12
#drawUnits
#viewUnits


proc saveActivations {fname} { 
    set outfile [open $fname a] 
    puts $outfile "[getObj currentExample.num] [getObj currentExample.name] " nonewline 
    puts $outfile [getObj exampleError]
    close $outfile 
}

proc testAllFinalActs {fname} { 
    resetExampleSet [getObj testingSet.name] 
    set nex [getObj testingSet.numExamples] 
    for {set i 0} {$i < $nex} {incr i} {
	doExample -set [getObj testingSet.name]
	saveActivations $fname
    }
}



proc testNetwork {n train trainNum train2 trainNum2 test fname} {
	for {set i 0} {$i < $n} {incr i} {
		resetNet
			useTrainingSet $train
			train $trainNum
			useTrainingSet $train2
			train $trainNum2
			useTestingSet $test
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
	}
}



# define lists for looping
set pretrainEvent [list pretrain_100_0 pretrain_90_10 pretrain_80_20 pretrain_70_30 pretrain_60_40 pretrain_50_50]
set experiment [list exp1 exp3 exp5]
set famPhaseFile [list exp1_fam exp3_fam exp5_fam] 
set testPhaseFile [list exp1_test exp3_test exp5_test] 
set pretrainingEpochs [list 1500]
set habituationEpochs [list 4]   

# define loop
foreach pEvent $pretrainEvent {
foreach fPhaseFile $famPhaseFile tPhaseFile $testPhaseFile exp $experiment  {
	set workingdirectory "REPLACE THIS WITH THE PATH TO WHERE YOUR DATA IS STORED"
				cd $workingdirectory
	foreach pEpochs $pretrainingEpochs {
		foreach hEpochs $habituationEpochs {
		testNetwork 20 $pEvent $pEpochs $fPhaseFile $hEpochs $tPhaseFile $learningRates$exp$pEpochs$hEpochs$pEvent.txt
		}
	}
}
}
# Example command to automate to run: testNetwork 64 pretrain 600 exp1_fam_ 10 exp1_test exp1_data.txt 
# Use this for simulations 1, 3, and 5
}


# define list for looping over networks
set learningRates [list 0.06]
set wgtDecay [list 0.0001]


# define loop
foreach lr $learningRates {
	foreach wDecay $wgtDecay {
		netSim1 netExp1$lr$wDecay $lr $wDecay $lr $wDecay 
	}
}
}


##################
##################
## SIMULATION 2 ##
##################
##################
proc sim2 {} {
proc netSim2 {netName learningRate weightDecay learningRates wgtDecay} {
addNet $netName -i 3

# input groups
addGroup Slot 40 INPUT OUT_NOISE
addGroup Motion 35 INPUT OUT_NOISE
addGroup Animate_Features 1 INPUT OUT_NOISE
addGroup Unrelated_IN 2 INPUT OUT_NOISE

# hidden group (# there are necessarily fewer hidden units than there are input and output units)
# context group
addGroup context 20 ELMAN
addGroup hidden 20 RELU 

# noise parameters
noiseType Slot -range 0.1
noiseType Motion -range 0.1
noiseType Animate_Features -range 0.1
noiseType Unrelated_IN -range 0.1

# output group
addGroup Slot_OUT 40 OUTPUT
addGroup Motion_OUT 35 OUTPUT 
addGroup Animate_Features_OUT 1 OUTPUT
addGroup Unrelated_OUT 2 OUTPUT

# connect groups (input -> hidden -> output)
connectGroups {Slot Motion Animate_Features Unrelated_IN context} hidden {Slot_OUT Motion_OUT Animate_Features_OUT Unrelated_OUT}
elmanConnect hidden context


# training examples
loadExamples pretrain_100_0.ex -exmode ORD -mode REPLACE
loadExamples pretrain_90_10.ex -exmode ORD -mode REPLACE
loadExamples pretrain_80_20.ex -exmode ORD -mode REPLACE
loadExamples pretrain_70_30.ex -exmode ORD -mode REPLACE
loadExamples pretrain_60_40.ex -exmode ORD -mode REPLACE
loadExamples pretrain_50_50.ex -exmode ORD -mode REPLACE 

loadExamples exp1_fam.ex 
loadExamples exp2_fam.ex 
loadExamples exp2_delay.ex 
loadExamples exp3_fam.ex 
loadExamples exp4_fam.ex 
loadExamples exp5_fam.ex 
loadExamples exp6_fam.ex 

loadExamples exp1_test.ex 
loadExamples exp2_test.ex 
loadExamples exp3_test.ex 
loadExamples exp4_test.ex 
loadExamples exp5_test.ex 
loadExamples exp6_test.ex 




# set learning and display parameters
setObj learningRate $learningRate
setObj momentum	    0.9
setObj batchSize    0
setObj numUpdates   10
setObj reportInterval 1
setObj unitCellSize 20
setObj linkCellSize 10
setObj randRange 0.1
setObj weightDecay $weightDecay
setObj pseudoExampleFreq 1



#resetPlot 
#plotRow 6 b 5 n Motion_OUT 7
#plotRow 2 b 10 n Unrelated_OUT 2
#plotRow 6 b 2 n Slot_OUT 12
#plotRow 4 b 6 n hidden 6
#plotRow 4 b 8 n context 6
#plotRow 6 b 5 n Motion 7
#plotRow 2 b 10 n Unrelated_IN 2
#plotRow 6 b 2 n Slot 12
#drawUnits
#viewUnits

proc saveActivations {fname} { 
    set outfile [open $fname a] 
    puts $outfile "[getObj currentExample.num] [getObj currentExample.name] " nonewline 
    puts $outfile [getObj exampleError]
    close $outfile 
}

proc testAllFinalActs {fname} { 
    resetExampleSet [getObj testingSet.name] 
    set nex [getObj testingSet.numExamples] 
    for {set i 0} {$i < $nex} {incr i} {
	doExample -set [getObj testingSet.name]
	saveActivations $fname
    }
}

proc testNetwork2 {n train trainNum train2 trainNum2 train3 trainNum3 test fname} {
	for {set i 0} {$i < $n} {incr i} {
		resetNet
			useTrainingSet $train
			train $trainNum
			useTrainingSet $train2
			train $trainNum2
			useTrainingSet $train3
			train $trainNum3
			useTestingSet $test
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
	}
}

set workingdirectory "REPLACE THIS WITH THE PATH TO WHERE YOUR DATA IS STORED"
cd $workingdirectory

# define lists for looping
set pretrainEvent [list pretrain_100_0 pretrain_90_10 pretrain_80_20 pretrain_70_30 pretrain_60_40 pretrain_50_50]
set pretrainingEpochs [list 1500]
set habituationEpochs [list 4]

# define loop
foreach pEvent $pretrainEvent {
foreach pEpochs $pretrainingEpochs {
	foreach hEpochs $habituationEpochs {
	testNetwork2 20 $pEvent $pEpochs exp2_fam $hEpochs exp2_delay 2 exp2_test Exp2$learningRates$pEpochs$hEpochs$pEvent.txt
	}
}
}

# Example command to automate to run: testNetwork2 64 pretrain 600 exp2_fam 10 exp2_delay 2 exp2_test exp2_data.txt 
# This command is meant to be run for Simulation 2 which corresponds to Experiment 2 in Markson and Spelke
}

# define list for looping over networks
set learningRates [list 0.06]
set wgtDecay [list 0.0001]


# define loop
foreach lr $learningRates {
	foreach wDecay $wgtDecay {
		netSim2 netExp2$lr$wDecay $lr $wDecay $lr $wDecay 
	}
}
}


#########################
#########################
##   SIMULATIONS 4 & 6 ##
#########################
#########################

proc sim3 {} {
proc netSim3 {netName learningRate weightDecay learningRates wgtDecay} {
addNet $netName -i 3

# input groups
addGroup Slot 40 INPUT OUT_NOISE
addGroup Motion 35 INPUT OUT_NOISE
addGroup Animate_Features 1 INPUT OUT_NOISE
addGroup Unrelated_IN 2 INPUT OUT_NOISE

# hidden group (# there are necessarily fewer hidden units than there are input and output units)
# context group
addGroup context 20 ELMAN
addGroup hidden 20 RELU 

# noise parameters
noiseType Slot -range 0.1
noiseType Motion -range 0.1
noiseType Animate_Features -range 0.1
noiseType Unrelated_IN -range 0.1

# output group
addGroup Slot_OUT 40 OUTPUT
addGroup Motion_OUT 35 OUTPUT 
addGroup Animate_Features_OUT 1 OUTPUT
addGroup Unrelated_OUT 2 OUTPUT

# connect groups (input -> hidden -> output)
connectGroups {Slot Motion Animate_Features Unrelated_IN context} hidden {Slot_OUT Motion_OUT Animate_Features_OUT Unrelated_OUT}
elmanConnect hidden context


# training examples
loadExamples pretrain_100_0.ex -exmode ORD -mode REPLACE
loadExamples pretrain_90_10.ex -exmode ORD -mode REPLACE
loadExamples pretrain_80_20.ex -exmode ORD -mode REPLACE
loadExamples pretrain_70_30.ex -exmode ORD -mode REPLACE
loadExamples pretrain_60_40.ex -exmode ORD -mode REPLACE
loadExamples pretrain_50_50.ex -exmode ORD -mode REPLACE 

loadExamples exp1_fam.ex 
loadExamples exp2_fam.ex 
loadExamples exp2_delay.ex 
loadExamples exp3_fam.ex 
loadExamples exp4_fam.ex 
loadExamples exp5_fam.ex 
loadExamples exp6_fam.ex 

loadExamples exp1_test.ex 
loadExamples exp2_test.ex 
loadExamples exp3_test.ex 
loadExamples exp4_test.ex 
loadExamples exp5_test.ex 
loadExamples exp6_test.ex 



# set learning and display parameters
setObj learningRate $learningRate
setObj momentum	    0.9
setObj batchSize    0
setObj numUpdates   10
setObj reportInterval 1
setObj unitCellSize 20
setObj linkCellSize 10
setObj randRange 0.1
setObj weightDecay $weightDecay
setObj pseudoExampleFreq 1



#resetPlot 
#plotRow 6 b 5 n Motion_OUT 7
#plotRow 2 b 10 n Unrelated_OUT 2
#plotRow 6 b 2 n Slot_OUT 12
#plotRow 4 b 6 n hidden 6
#plotRow 4 b 8 n context 6
#plotRow 6 b 5 n Motion 7
#plotRow 2 b 10 n Unrelated_IN 2
#plotRow 6 b 2 n Slot 12
#drawUnits
#viewUnits


proc saveActivations {fname} { 
    set outfile [open $fname a] 
    puts $outfile "[getObj currentExample.num] [getObj currentExample.name] " nonewline 
    puts $outfile [getObj exampleError]
    close $outfile 
}

proc testAllFinalActs {fname} { 
    resetExampleSet [getObj testingSet.name] 
    set nex [getObj testingSet.numExamples] 
    for {set i 0} {$i < $nex} {incr i} {
	doExample -set [getObj testingSet.name]
	saveActivations $fname
    }
}



proc testNetwork {n train trainNum train2 trainNum2 test fname} {
	for {set i 0} {$i < $n} {incr i} {
		resetNet
			useTrainingSet $train
			train $trainNum
			useTrainingSet $train2
			train $trainNum2
			useTestingSet $test
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
			testAllFinalActs $fname
	}
}



# define lists for looping
set pretrainEvent [list pretrain_100_0 pretrain_90_10 pretrain_80_20 pretrain_70_30 pretrain_60_40 pretrain_50_50]
set experiment [list exp4 exp6]
set famPhaseFile [list exp4_fam exp6_fam]
set testPhaseFile [list exp4_test exp6_test]
set pretrainingEpochs [list 1500]
set habituationEpochs [list 4]

# define loop
foreach pEvent $pretrainEvent {
foreach fPhaseFile $famPhaseFile tPhaseFile $testPhaseFile exp $experiment  {
	set workingdirectory "REPLACE THIS WITH THE PATH TO WHERE YOUR DATA IS STORED"
			cd $workingdirectory
	foreach pEpochs $pretrainingEpochs {
		foreach hEpochs $habituationEpochs {
		testNetwork 20 $pEvent $pEpochs $fPhaseFile $hEpochs $tPhaseFile $learningRates$exp$pEpochs$hEpochs$pEvent.txt
		}
	}
}
}
# Example command to automate to run: testNetwork 64 pretrain 600 exp1_fam_ 10 exp1_test exp1_data.txt 
# Use this for simulations 1, 3, and 5
}


# define list for looping over networks
set learningRates [list 0.06]
set wgtDecay [list 0.0001]


# define loop
foreach lr $learningRates {
	foreach wDecay $wgtDecay {
		netSim3 netExp3$lr$wDecay $lr $wDecay $lr $wDecay 
	}
}
}
####################################################################
# UNCOMMENT THE CODE BELOW IF YOU WANT TO AUTOMATE THE SIMULATIONS #
####################################################################
#sim1
#sim2
#sim3

#####################################################################
# IF YOU WANT TO PLAY AROUND WITH THE MODEL AND NOT AUTOMATE THE ####
# SIMULATIONS TYPE 'vanillaSim' IN THE LENS CONSOLE AFTER FIRING UP #
# LENS.															 ####
#####################################################################
proc vanillaSim {} {
addNet vanillaSim -i 3

# input groups
addGroup Slot 40 INPUT OUT_NOISE
addGroup Motion 35 INPUT OUT_NOISE
addGroup Animate_Features 1 INPUT OUT_NOISE
addGroup Unrelated_IN 2 INPUT OUT_NOISE

# hidden group (# there are necessarily fewer hidden units than there are input and output units)
# context group
addGroup context 20 ELMAN
addGroup hidden 20 RELU 

# noise parameters
noiseType Slot -range 0.1
noiseType Motion -range 0.1
noiseType Animate_Features -range 0.1
noiseType Unrelated_IN -range 0.1

# output group
addGroup Slot_OUT 40 OUTPUT
addGroup Motion_OUT 35 OUTPUT 
addGroup Animate_Features_OUT 1 OUTPUT
addGroup Unrelated_OUT 2 OUTPUT

# connect groups (input -> hidden -> output)
connectGroups {Slot Motion Animate_Features Unrelated_IN context} hidden {Slot_OUT Motion_OUT Animate_Features_OUT Unrelated_OUT}
elmanConnect hidden context


# training examples
loadExamples pretrain_100_0.ex -exmode ORD -mode REPLACE
loadExamples pretrain_90_10.ex -exmode ORD -mode REPLACE
loadExamples pretrain_80_20.ex -exmode ORD -mode REPLACE
loadExamples pretrain_70_30.ex -exmode ORD -mode REPLACE
loadExamples pretrain_60_40.ex -exmode ORD -mode REPLACE
loadExamples pretrain_50_50.ex -exmode ORD -mode REPLACE 

loadExamples exp1_fam.ex 
loadExamples exp2_fam.ex 
loadExamples exp2_delay.ex 
loadExamples exp3_fam.ex 
loadExamples exp4_fam.ex 
loadExamples exp5_fam.ex 
loadExamples exp6_fam.ex 

loadExamples exp1_test.ex 
loadExamples exp2_test.ex 
loadExamples exp3_test.ex 
loadExamples exp4_test.ex 
loadExamples exp5_test.ex 
loadExamples exp6_test.ex  



# set learning and display parameters
setObj learningRate 0.06
setObj momentum	    0.9
setObj batchSize    0
setObj numUpdates   10
setObj reportInterval 1
setObj unitCellSize 20
setObj linkCellSize 10
setObj randRange 0.1
setObj weightDecay 0.001



resetPlot 
plotRow 6 b 5 n Motion_OUT 7
plotRow 2 b 10 n Unrelated_OUT 2
plotRow 6 b 2 n Slot_OUT 12
plotRow 4 b 6 n hidden 6
plotRow 4 b 8 n context 6
plotRow 6 b 5 n Motion 7
plotRow 2 b 10 n Unrelated_IN 2
plotRow 6 b 2 n Slot 12
drawUnits
viewUnits
}




proc vanillaSim2 {} {
addNet vanillaSim -i 3

# input groups
addGroup Slot 40 INPUT 
addGroup Motion 35 INPUT 
addGroup Animate_Features 1 INPUT 
addGroup Unrelated_IN 2 INPUT 

# hidden group (# there are necessarily fewer hidden units than there are input and output units)
# context group
addGroup context 20 ELMAN
addGroup hidden 20 RELU 


# output group
addGroup Slot_OUT 40 OUTPUT
addGroup Motion_OUT 35 OUTPUT 
addGroup Animate_Features_OUT 1 OUTPUT
addGroup Unrelated_OUT 2 OUTPUT

# connect groups (input -> hidden -> output)
connectGroups {Slot Motion Animate_Features Unrelated_IN context} hidden {Slot_OUT Motion_OUT Animate_Features_OUT Unrelated_OUT}
elmanConnect hidden context


# training examples
loadExamples pretrain_100_0_truncated.ex 




# set learning and display parameters
setObj learningRate 0.06
setObj momentum	    0.9
setObj batchSize    0
setObj numUpdates   10
setObj reportInterval 1
setObj unitCellSize 20
setObj linkCellSize 10
setObj randRange 0.1



resetPlot 
plotRow 6 b 5 n Motion_OUT 7
plotRow 2 b 10 n Unrelated_OUT 2
plotRow 6 b 2 n Slot_OUT 12
plotRow 4 b 6 n hidden 6
plotRow 6 b 8 n context 6
plotRow 6 b 5 n Motion 7
plotRow 2 b 10 n Unrelated_IN 2
plotRow 6 b 2 n Slot 12
drawUnits
viewUnits
}
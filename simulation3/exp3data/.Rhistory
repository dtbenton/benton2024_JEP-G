dim(Data)
dimension = dim(Data)
Data_tall =  reshape(Data, varying = c(14:21), v.names = "measure",
timevar = "condition",   direction = "long")
Data_tall = Data_tall[order(Data_tall$ID_for_analysis),] # order the data frame in terms of participant ID;
# to avoid wonky things happening and to save yourself
# a full-day headache in the future, reorder by ID
# immediately after reshaping the dataframe.
names(Data_tall)
Data_tall$id = NULL
names(Data_tall)
Data_tall$trialType = rep(c("control","control","control","control","control","experimental","experimental",
"experimental"), times = dimension[1])
Data_tall$objectType = rep(c("A","B","C","D","E",
"A","B","C"), times = dimension[1])
# CHANGE SOME OF THE COLUMN NAMES
names(Data_tall)
colnames(Data_tall)[which(names(Data_tall) == "ID_for_analysis")] <- "ID"
colnames(Data_tall)[which(names(Data_tall) == "age.y.")] <- "Age"
colnames(Data_tall)[which(names(Data_tall) == "age.m.")] <- "AgeNum"
colnames(Data_tall)[which(names(Data_tall) == "sex")] <- "Sex"
colnames(Data_tall)[which(names(Data_tall) == "Inperson.online")] <- "Location"
colnames(Data_tall)[which(names(Data_tall) == "ask_order")] <- "AskOrder"
colnames(Data_tall)[which(names(Data_tall) == "location_of_A")] <- "Alocation"
colnames(Data_tall)[which(names(Data_tall) == "prepretest")] <- "Prepretest"
colnames(Data_tall)[which(names(Data_tall) == "measure")] <- "choice"
colnames(Data_tall)[which(names(Data_tall) == "color_of_objects")] <- "Color"
colnames(Data_tall)[which(names(Data_tall) == "probability")] <- "Probability"
colnames(Data_tall)[which(names(Data_tall) == "order_of_the_machine_going")] <- "PretestOrder"
colnames(Data_tall)[which(names(Data_tall) == "prob_generalization")] <- "ProbGeneralization"
colnames(Data_tall)[which(names(Data_tall) == "experimental_vs_control_order")] <- "TrialOrder"
names(Data_tall)
# MODIFY CHOICES COLUMN
# Deal with "unsures" in the choice column
Data_tall$choices = rep(0, nrow(Data_tall))
for(i in 1:nrow(Data_tall)){
if(is.na(Data_tall$choice[i])==T|Data_tall$choice[i]=="NaN"){
Data_tall$choices[i]= NA
} else if(Data_tall$choice[i]==1){
Data_tall$choices[i]=1
} else if(Data_tall$choice[i]==0){
Data_tall$choices[i]=0
}
else {
Data_tall$choices[i]=NA
}
}
Data_tall$choice = Data_tall$choices
Data_tall$choices = NULL
Data_tall$choice = as.numeric(Data_tall$choice)
# MODIFY ProbGeneralization COLUMN
# Deal with numbers and "unsures" in the ProbGeneralization column
Data_tall$ProbGeneralizations = rep(NA, nrow(Data_tall))
for(i in 1:nrow(Data_tall)){
if(is.null(Data_tall$ProbGeneralization[i])){
Data_tall$ProbGeneralizations[i]=NA
} else if(Data_tall$ProbGeneralization[i]==0){
Data_tall$ProbGeneralizations[i]="E"
} else if(Data_tall$ProbGeneralization[i]<4&Data_tall$ProbGeneralization[i]>0){
Data_tall$ProbGeneralizations[i]="D"
} else if(Data_tall$ProbGeneralization[i]==4){
Data_tall$ProbGeneralizations[i]="C"
} else if(Data_tall$ProbGeneralization[i]<8&Data_tall$ProbGeneralization[i]>4){
Data_tall$ProbGeneralizations[i]="B"
} else if(Data_tall$ProbGeneralization[i]==8){
Data_tall$ProbGeneralizations[i]="A"
} else{
Data_tall$ProbGeneralizations[i]=Data_tall$ProbGeneralization[i]
}
}
Data_tall$ProbGeneralization = Data_tall$ProbGeneralizations
Data_tall$ProbGeneralizations = NULL
Data_tall$ProbGeneralization = as.factor(Data_tall$ProbGeneralization)
# get counts for choice and ProbGeneralization
table(Data_tall$choice)
table(Data_tall$ProbGeneralization)
# RENAME LEVELS OF COLUMNS
Data_tall$Location = revalue(x = as.factor(Data_tall$Location),
c("0" = "Online", "1"="In person"))
Data_tall$Sex = revalue(x = as.factor(Data_tall$Sex),
c("F" = "female", "M"="male"))
Data_tall$Color = revalue(x = as.factor(Data_tall$Color),
c("P" = "Pink", "O"="Orange", "B"="Blue", "G"="Green", "Y"="Yellow", "R"="Red"))
Data_tall$Prepretest = revalue(x = as.factor(Data_tall$Prepretest),
c("0" = "Incorrect", "1"="Correct"))
Data_tall$Probability = revalue(x = as.factor(Data_tall$Probability),
c("A" = "0%", "B"="20%", "C"="50%", "D"="80%", "E"="100%"))
Data_tall$ProbGeneralization = revalue(x = as.factor(Data_tall$ProbGeneralization),
c("E" = "0%", "D"="20%", "C"="50%", "B"="80%", "A"="100%"))
Data_tall$Age = as.factor(Data_tall$Age)
Data_tall$PretestOrder = as.factor(Data_tall$PretestOrder)
Data_tall$TrialOrder = as.factor(Data_tall$TrialOrder)
Data_tall$AskOrder = as.factor(Data_tall$AskOrder)
Data_tall$Alocation = as.factor(Data_tall$Alocation)
Data_tall$trialType = as.factor(Data_tall$trialType)
Data_tall$objectType = as.factor(Data_tall$objectType)
# REODRDER COLUMNS
Data_tall$condition = NULL
names(Data_tall)
dim(Data_tall)
Data_tall = as.data.frame(Data_tall[,c(1,3:5,2,6:13,15:16,14)])
fix(Data_tall)
## backwards blocking ##
babby.df.100 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="100%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="100%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="100%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="100%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="100%"],
prob = as.factor(rep("100%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="100%"]))))
babby.df.80 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="80%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="80%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="80%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="80%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="80%"],
prob = as.factor(rep("80%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="80%"]))))
babby.df.50 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="50%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="50%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="50%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="50%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="50%"],
prob = as.factor(rep("50%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="50%"]))))
babby.df.20 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="20%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="20%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="20%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="20%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="20%"],
prob = as.factor(rep("20%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="20%"]))))
babby.df.0 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="0%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="0%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="0%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="0%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="0%"],
prob = as.factor(rep("0%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="0%"]))))
babby.df = rbind(babby.df.100, babby.df.80, babby.df.50, babby.df.20, babby.df.0)
names(babby.df)
dim(babby.df)
babby.df = c(1:63)
babby.df.100 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="100%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="100%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="100%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="100%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="100%"],
prob = as.factor(rep("100%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="100%"]))))
babby.df.80 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="80%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="80%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="80%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="80%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="80%"],
prob = as.factor(rep("80%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="80%"]))))
babby.df.50 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="50%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="50%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="50%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="50%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="50%"],
prob = as.factor(rep("50%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="50%"]))))
babby.df.20 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="20%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="20%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="20%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="20%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="20%"],
prob = as.factor(rep("20%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="20%"]))))
babby.df.0 = data.frame(B_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="0%"],
C_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="C" & Data_tall$Probability=="0%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="0%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="0%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="0%"],
prob = as.factor(rep("0%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="B" & Data_tall$Probability=="0%"]))))
babby.df = rbind(babby.df.100, babby.df.80, babby.df.50, babby.df.20, babby.df.0)
babby.df$ID = c(1:63)
names(babby.df)
## backwards blocking ##
babby.df.100 = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="100%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="100%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="100%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="100%"],
prob = as.factor(rep("100%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="100%"]))))
babby.df.80 = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="80%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="80%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="80%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="80%"],
prob = as.factor(rep("80%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="80%"]))))
babby.df.50 = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="50%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="50%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="50%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="50%"],
prob = as.factor(rep("50%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="50%"]))))
babby.df.20 = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="20%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="20%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="20%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="20%"],
prob = as.factor(rep("20%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="20%"]))))
babby.df.0 = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="0%"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Probability=="0%"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Probability=="0%"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Probability=="0%"],
prob = as.factor(rep("0%",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Probability=="0%"]))))
babby.df = rbind(babby.df.100, babby.df.80, babby.df.50, babby.df.20, babby.df.0)
dim(babby.df)
babby.df$ID = c(1:63)
names(babby.df)
babby.df_tall = reshape(babby.df, varying = c(1:4), v.names = "choice",
timevar = "condition",   direction = "long", idvar = "ID")
babby.df_tall = babby.df_tall[order(babby.df_tall$ID),]
fix(babby.df_tall)
dim(babby.df_tall)
length(rep(c("A","A","B","C"), each = 1, times = 63))
babby.df_tall$objectType = rep(c("A","A","B","C"), each = 1, times = 63)
babby.df_tall$trialType = rep(c("experimental","control",
"control","control"), each = 1, times = 63)
babby.df_tall$objectType = factor(babby.df_tall$objectType)
babby.df_tall$trialType = factor(babby.df_tall$trialType)
names(babby.df_tall)
is.factor(babby.df_tall$prob)
babby_condition_only_glmer = glmer(choice~(prob+trialType+objectType)^3+(1|ID), family=binomial,
data=babby.df_tall)
Anova(babby_condition_only_glmer)
babby_condition_only_trial_type_glmer = glmer(choice~trialType+(1|ID), family=binomial,
data=babby.df_tall)
summary(babby_condition_only_trial_type_glmer)
exp(fixef(babby_condition_only_trial_type_glmer))
relevel
?relevel
levels(babby.df_tall$trialType)
babby.df_tall$trialType <- relevel(babby.df_tall$trialType, ref = "experimental")
babby_condition_only_glmer = glmer(choice~(prob+trialType+objectType)^3+(1|ID), family=binomial,
data=babby.df_tall)
Anova(babby_condition_only_glmer)
babby_condition_only_trial_type_glmer = glmer(choice~trialType+(1|ID), family=binomial,
data=babby.df_tall)
summary(babby_condition_only_trial_type_glmer)
condition_barplot = ggplot(Data_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Condition) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#A8A8A8")) +
coord_cartesian(ylim=c(0, 1))
rlang::last_trace()
names(Data_tall)
condition_barplot = ggplot(Data_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Probability) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#A8A8A8")) +
coord_cartesian(ylim=c(0, 1))
condition_barplot = ggplot(Data_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Probability) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#A8A8A8")) +
coord_cartesian(ylim=c(0, 1.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
condition_barplot = ggplot(Data_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#A8A8A8")) +
coord_cartesian(ylim=c(0, 1.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
condition_barplot = ggplot(Data_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#A8A8A8")) +
coord_cartesian(ylim=c(0, 1.2)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
table(Data_tall$Probability)
table(Data_tall$Probability)/4
table(Data_tall$Probability)/8
levels(Data_tall$Location)
## backwards blocking ##
babby.df.I = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="In person"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Location=="In person"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Location=="In person"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Location=="In person"],
Location = as.factor(rep("In person",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A"] & Data_tall$Location=="In person"))),
)
babby.df.O = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="Online"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Location=="Online"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Location=="Online"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Location=="Online"],
Location = as.factor(rep("Online",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A"] & Data_tall$Location=="Online"))),
)
## backwards blocking ##
babby.df.I = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="In person"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Location=="In person"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Location=="In person"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Location=="In person"],
Location = as.factor(rep("In person",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="In person"]))),
)
babby.df.O = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="Online"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Location=="Online"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Location=="Online"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Location=="Online"],
Location = as.factor(rep("Online",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="Online"]))))
## backwards blocking ##
babby.df.I = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="In person"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Location=="In person"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Location=="In person"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Location=="In person"],
Location = as.factor(rep("In person",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="In person"])))                    )
babby.df.O = data.frame(A_exp = Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="Online"],
A_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="A" & Data_tall$Location=="Online"],
B_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="B" & Data_tall$Location=="Online"],
C_control = Data_tall$choice[Data_tall$trialType=="control" & Data_tall$objectType=="C" & Data_tall$Location=="Online"],
Location = as.factor(rep("Online",length(Data_tall$choice[Data_tall$trialType=="experimental" & Data_tall$objectType=="A" & Data_tall$Location=="Online"]))))
babby.df = rbind(babby.df.I, babby.df.O)
babby.df$ID = c(1:63)
names(babby.df)
babby.df_tall = reshape(babby.df, varying = c(1:4), v.names = "choice",
timevar = "condition",   direction = "long", idvar = "ID")
babby.df_tall = babby.df_tall[order(babby.df_tall$ID),]
babby.df_tall$objectType = rep(c("A","A","B","C"), each = 1, times = 63)
babby.df_tall$trialType = rep(c("experimental","control",
"control","control"), each = 1, times = 63)
babby.df_tall$objectType = factor(babby.df_tall$objectType)
babby.df_tall$trialType = factor(babby.df_tall$trialType)
babby.df_tall$trialType <- relevel(babby.df_tall$trialType, ref = "experimental")
# run model to test for main effects and two-way interactions
babby_condition_only_glmer = glmer(choice~(Location+trialType+objectType)^3+(1|ID), family=binomial,
data=babby.df_tall)
Anova(babby_condition_only_glmer)
babby_condition_only_trial_type_glmer = glmer(choice~trialType+(1|ID), family=binomial,
data=babby.df_tall)
babby_condition_only_trial_type_glmer = glmer(choice~trialType+Location+(1|ID), family=binomial,
data=babby.df_tall)
babby_condition_only_trial_type_glmer = glmer(choice~(trialType+Location)^2+(1|ID), family=binomial,
data=babby.df_tall)
summary(babby_condition_only_trial_type_glmer)
Anova(babby_condition_only_trial_type_glmer)
babby_condition_only_trial_type_glmer_online = glmer(choice~trialType+(1|ID), family=binomial,
data=babby.df_tall[babby.df_tall$Location=="Online",])
summary(babby_condition_only_trial_type_glmer_online)
babby_condition_only_trial_type_glmer_I = glmer(choice~trialType+(1|ID), family=binomial,
data=babby.df_tall[babby.df_tall$Location=="In person",])
summary(babby_condition_only_trial_type_glmer_I)
condition_barplot = ggplot(Data_tall, aes(trialType, choice, fill = objectType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
facet_wrap(~Probability) +
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_manual(values=c("#000000",
"#888888",
"#C8C8C8",
"#696969",
"#A8A8A8")) +
coord_cartesian(ylim=c(0, 1.5)) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black"),
axis.title.x=element_blank()) +
ylab("# of questions children judged object was a blicket")
simplePostTTest = function(dataFrame,dv, col1, col1level, col1level2) {
# Subsetting the dataframe based on the input parameters
data1 = D[[dv]][dataFrame[[col1]] == col1level1]
data2 = D[[dv]][dataFrame[[col1]] == col1level2]
# Performing the paired t-test
compute = t.test(data1, data2, paired = TRUE)
# Calculating means and standard deviations for each group
mean1 = mean(data1)
sd1 = sd(data1)
mean2 = mean(data2)
sd2 = sd(data2)
# Creating results vector
results = c(sprintf("%.5g",mean1), sprintf("%.5g",sd1), sprintf("%.5g",mean2),
sprintf("%.5g",sd2), sprintf("%.5g",compute$statistic), sprintf("%.5g",compute$p.value),compute[[2]])
# Naming the results for clarity
names(results) = c(paste("mean", col1level1, sep=" "),
paste("sd", col1level1, sep=" "),
paste("mean", col1level2, sep=" "),
paste("sd", col1level2, sep=" "),
"t_value",
"p_value",
"DoF")
# Returning the results with labels indicating trial type
return(results)
}
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/saxeCareyTzelnic07/exp1&2data")
D.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/saxeCareyTzelnic07/exp3data")
D.100.e3 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.90.e3 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.80.e3 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.70.e3 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.60.e3 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D.50.e3 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
D = rbind(D.100, D.90, D.80, D.70, D.60, D.50,
D.100.e3, D.90.e3, D.80.e3, D.70.e3, D.60.e3, D.50.e3)
dim(D)
length(rep(1:120, each = 160))
19200*2
length(rep(c("100 percent", "90 percent", "80 percent", "70 percent", "60 percent", "50 percent"),
each = 3200, times = 2))
fix(D)
D = rbind(D.100, D.90, D.80, D.70, D.60, D.50)
# get dimensionality of D
dim(D)
# create ID column
D$ID = rep(1:120, each = 160)
# side
D$side = rep(c("Hand", "Train"), each = 8, times = 1200)
D$side = as.factor(D$side)
# side 2
D$side_two = rep(c("Left", "Right"), each = 4, times = 2400)
D$side_two = as.factor(D$side_two)
# create frequency column
D$frequency = rep(c("100 percent", "90 percent", "80 percent", "70 percent", "60 percent", "50 percent"),
each = 3200)
D$frequency = as.factor(D$frequency)
# looking time
D$looking_time = D$V3
# remove columns
D = D[,-c(1:3)]
# check the order of the levels of the frequency variable
levels(D$frequency)
# reorder levels of the frequency variable
D$frequency <- factor(D$frequency, levels = c("100 percent",
"90 percent",
"80 percent",
"70 percent",
"60 percent",
"50 percent"))
simplePostTTest(D,"looking_time","side","Same Side","Different Side")
simplePostTTest = function(dataFrame,dv, col1, col1level, col1level2) {
# Subsetting the dataframe based on the input parameters
data1 = D[[dv]][dataFrame[[col1]] == col1level1]
data2 = D[[dv]][dataFrame[[col1]] == col1level2]
# Performing the paired t-test
compute = t.test(data1, data2, paired = TRUE)
# Calculating means and standard deviations for each group
mean1 = mean(data1)
sd1 = sd(data1)
mean2 = mean(data2)
sd2 = sd(data2)
# Creating results vector
results = c(sprintf("%.5g",mean1), sprintf("%.5g",sd1), sprintf("%.5g",mean2),
sprintf("%.5g",sd2), sprintf("%.5g",compute$statistic), sprintf("%.5g",compute$p.value),compute[[2]])
# Naming the results for clarity
names(results) = c(paste("mean", col1level1, sep=" "),
paste("sd", col1level1, sep=" "),
paste("mean", col1level2, sep=" "),
paste("sd", col1level2, sep=" "),
"t_value",
"p_value",
"DoF")
# Returning the results with labels indicating trial type
return(results)
}
simplePostTTest(D,"looking_time","side","Same Side","Different Side")
simplePostTTest = function(dataFrame,dv, col1, col1level1, col1level2) {
# Subsetting the dataframe based on the input parameters
data1 = D[[dv]][dataFrame[[col1]] == col1level1]
data2 = D[[dv]][dataFrame[[col1]] == col1level2]
# Performing the paired t-test
compute = t.test(data1, data2, paired = TRUE)
# Calculating means and standard deviations for each group
mean1 = mean(data1)
sd1 = sd(data1)
mean2 = mean(data2)
sd2 = sd(data2)
# Creating results vector
results = c(sprintf("%.5g",mean1), sprintf("%.5g",sd1), sprintf("%.5g",mean2),
sprintf("%.5g",sd2), sprintf("%.5g",compute$statistic), sprintf("%.5g",compute$p.value),compute[[2]])
# Naming the results for clarity
names(results) = c(paste("mean", col1level1, sep=" "),
paste("sd", col1level1, sep=" "),
paste("mean", col1level2, sep=" "),
paste("sd", col1level2, sep=" "),
"t_value",
"p_value",
"DoF")
# Returning the results with labels indicating trial type
return(results)
}
simplePostTTest(D,"looking_time","side","Same Side","Different Side")
levels(D$side)
simplePostTTest(D,"looking_time","side","Hand","Train")

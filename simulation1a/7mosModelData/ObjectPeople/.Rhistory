### SPELKE, PHILLIPS, & WOODWARD (1995) ANALYSES ###
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision1/simulations/spelkePhillipsWoodward1995/SRN/3Contact3NoContactTestEvents/7mosModelData/People")
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/7mosModelData/People")
people.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/7mosModelData/Object")
object.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/7mosModelData/Object")
object.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/7mosModelData/PeopleObject")
peopleObjects.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/7mosModelData/PeopleObject")
peopleObjects.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
peopleObjects.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
peopleObjects.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
peopleObjects.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
peopleObjects.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
peopleObjects.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/7mosModelData/ObjectPeople")
setwd("C:/Users/bentod2/Documents/projects/current/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/7mosModelData/ObjectPeople")
objectsPeople.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
objectsPeople.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
objectsPeople.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
objectsPeople.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
objectsPeople.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
objectsPeople.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
objectsPeople.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
# combine dataframes into a single 'D' data frame
D = rbind(people.100, people.90, people.80, people.70, people.60, people.50,
object.100, object.90, object.80, object.70, object.60, object.50,
peopleObjects.100, peopleObjects.90, peopleObjects.80, peopleObjects.70, peopleObjects.60, peopleObjects.50,
objectsPeople.100, objectsPeople.90, objectsPeople.80, objectsPeople.70, objectsPeople.60, objectsPeople.50)
# get dimensionality of D
dim(D)
# create an ID column
D$ID = rep(1:480, each = 40)
# create trial type column
D$trialType = rep(c("Contact", "No Contact"), each = 1,  times = 9600)
D$trialType = as.factor(D$trialType)
# create condition column
D$condition = rep(c("People", "Objects", "People with\nInanimate Features",
"Objects with\nAnimate Features"),
each = 4800)
D$condition = as.factor(D$condition)
# reorder levels of condition
D$condition <- factor(D$condition, levels = c("Objects",
"People",
"People with\nInanimate Features",
"Objects with\nAnimate Features"))
# create frequency column
D$frequency = rep(c("100 percent", "90 percent", "80 percent", "70 percent", "60 percent", "50 percent"),
each = 800, times = 4)
D$frequency = as.factor(D$frequency)
# create a 'looking time' column
D$lookingTime = D$V3
# remove columns and get the names of the resulting columns
D = D[,-c(1:3)]
names(D)
# check the order of the levels of the frequency variable
levels(D$frequency)
# reorder levels of the frequency variable
D$frequency <- factor(D$frequency, levels = c("100 percent",
"90 percent",
"80 percent",
"70 percent",
"60 percent",
"50 percent"))
names(D)
lme.fit = lme(lookingTime~(trialType+condition+frequency)^3,
random=~1|ID, data = D)
### TABLE OF CONTENTS ###
# SPELKE, PHILLIPS, & WOODWARD (1995) ANALYSES
# SAXE, TENENBAUM, & CAREY (2005) ANALYSES
# SAXE, CAREY, TZELNIC (2007) ANALYSES
# MARKSON & SPELKE (2006) ANALYSES
# LOAD LIBRARIES #
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(Hmisc)
# remove scientific notation
options(scipen=9999)
lme.fit = lme(lookingTime~(trialType+condition+frequency)^3,
random=~1|ID, data = D)
anova.lme(lme.fit)
t.test(D$lookingTime[D$condition=="People with Inanimate Features" & D$trialType=="Contact"],
D$lookingTime[D$condition=="People with Inanimate Features" & D$trialType=="No Contact"],
paired = TRUE)
levels(D$condition)
t.test(D$lookingTime[D$condition=="People with\nInanimate Features" & D$trialType=="Contact"],
D$lookingTime[D$condition=="People with\nInanimate Features" & D$trialType=="No Contact"],
paired = TRUE)
names(t.test(D$lookingTime[D$condition=="People with\nInanimate Features" & D$trialType=="Contact"],
D$lookingTime[D$condition=="People with\nInanimate Features" & D$trialType=="No Contact"],
paired = TRUE))
names(t.test(D$lookingTime[D$condition=="People with\nInanimate Features" & D$trialType=="Contact"],
D$lookingTime[D$condition=="People with\nInanimate Features" & D$trialType=="No Contact"],
paired = TRUE))$statistic
t.test(D$lookingTime[D$condition=="People with\nInanimate Features" & D$trialType=="Contact"],
D$lookingTime[D$condition=="People with\nInanimate Features" & D$trialType=="No Contact"],
paired = TRUE)$statistic
postTTest = function(condition1,condition2,trialType1,trialType2,frequency){
compute = t.test(D$lookingTime[D$condition==condition1 & D$trialType==trialType1 & D$frequency==frequency],
D$lookingTime[D$condition==condition2 & D$trialType==trialType2 & D$frequency==frequency],
paired = TRUE)
mean1 = mean(D$lookingTime[D$condition==condition1 & D$trialType==trialType1 & D$frequency==frequency])
sd1 = sd(D$lookingTime[D$condition==condition1 & D$trialType==trialType1 & D$frequency==frequency])
mean2 = mean(D$lookingTime[D$condition==condition2 & D$trialType==trialType2 & D$frequency==frequency])
sd2 = sd(D$lookingTime[D$condition==condition2 & D$trialType==trialType2 & D$frequency==frequency])
}
postTTest = function(condition1,condition2,trialType1,trialType2,frequency){
compute = t.test(D$lookingTime[D$condition==condition1 & D$trialType==trialType1 & D$frequency==frequency],
D$lookingTime[D$condition==condition2 & D$trialType==trialType2 & D$frequency==frequency],
paired = TRUE)
mean1 = mean(D$lookingTime[D$condition==condition1 & D$trialType==trialType1 & D$frequency==frequency])
sd1 = sd(D$lookingTime[D$condition==condition1 & D$trialType==trialType1 & D$frequency==frequency])
mean2 = mean(D$lookingTime[D$condition==condition2 & D$trialType==trialType2 & D$frequency==frequency])
sd2 = sd(D$lookingTime[D$condition==condition2 & D$trialType==trialType2 & D$frequency==frequency])
return(c(mean1=mean1,sd1=sd1,mean2=mean2,sd2=sd2,t_value=compute$statistic,p_value=p.value))
}
postTTest("People with\nInanimate Features","Contact","No Contact","90 percent")
postTTest <- function(condition, trialType1, trialType2, frequency) {
# Subsetting the dataframe based on the input parameters
data1 <- D$lookingTime[D$condition == condition & D$trialType == trialType1 & D$frequency == frequency]
data2 <- D$lookingTime[D$condition == condition & D$trialType == trialType2 & D$frequency == frequency]
# Performing the paired t-test
compute <- t.test(data1, data2, paired = TRUE)
# Calculating means and standard deviations for each group
mean1 <- mean(data1)
sd1 <- sd(data1)
mean2 <- mean(data2)
sd2 <- sd(data2)
# Returning the results including the correct reference to the p-value
return(c(mean1 = mean1, sd1 = sd1, mean2 = mean2, sd2 = sd2, t_value = compute$statistic, p_value = compute$p.value))
}
# Example function call
postTTest("People with\nInanimate Features", "Contact", "No Contact", "90 percent")
postTTest <- function(condition, trialType1, trialType2, frequency) {
# Subsetting the dataframe based on the input parameters
data1 <- D$lookingTime[D$condition == condition & D$trialType == trialType1 & D$frequency == frequency]
data2 <- D$lookingTime[D$condition == condition & D$trialType == trialType2 & D$frequency == frequency]
# Performing the paired t-test
compute <- t.test(data1, data2, paired = TRUE)
# Calculating means and standard deviations for each group
mean1 <- mean(data1)
sd1 <- sd(data1)
mean2 <- mean(data2)
sd2 <- sd(data2)
# Preparing named vector for clear output
results <- c(
paste("mean", trialType1, sep="_") = mean1,
postTTest <- function(condition, trialType1, trialType2, frequency) {
# Subsetting the dataframe based on the input parameters
data1 <- D$lookingTime[D$condition == condition & D$trialType == trialType1 & D$frequency == frequency]
data2 <- D$lookingTime[D$condition == condition & D$trialType == trialType2 & D$frequency == frequency]
# Performing the paired t-test
compute <- t.test(data1, data2, paired = TRUE)
# Calculating means and standard deviations for each group
mean1 <- mean(data1)
sd1 <- sd(data1)
mean2 <- mean(data2)
sd2 <- sd(data2)
# Preparing named vector for clear output
results <- c(
paste("mean", trialType1, sep="_") = mean1,
postTTest <- function(condition, trialType1, trialType2, frequency) {
# Subsetting the dataframe based on the input parameters
data1 <- D$lookingTime[D$condition == condition & D$trialType == trialType1 & D$frequency == frequency]
data2 <- D$lookingTime[D$condition == condition & D$trialType == trialType2 & D$frequency == frequency]
# Performing the paired t-test
compute <- t.test(data1, data2, paired = TRUE)
# Calculating means and standard deviations for each group
mean1 <- mean(data1)
sd1 <- sd(data1)
mean2 <- mean(data2)
sd2 <- sd(data2)
# Creating results vector
results <- c(mean1, sd1, mean2, sd2, compute$statistic, compute$p.value)
# Naming the results for clarity
names(results) <- c(paste("mean", trialType1, sep="_"),
paste("sd", trialType1, sep="_"),
paste("mean", trialType2, sep="_"),
paste("sd", trialType2, sep="_"),
"t_value",
"p_value")
# Returning the results with labels indicating trial type
return(results)
}
# Example function call
postTTest("People with\nInanimate Features", "Contact", "No Contact", "90 percent")
####################
####################
# HELPER FUNCTIONS #
####################
####################
postTTest = function(condition, trialType1, trialType2, frequency) {
# Subsetting the dataframe based on the input parameters
data1 = D$lookingTime[D$condition == condition & D$trialType == trialType1 & D$frequency == frequency]
data2 = D$lookingTime[D$condition == condition & D$trialType == trialType2 & D$frequency == frequency]
# Performing the paired t-test
compute = t.test(data1, data2, paired = TRUE)
# Calculating means and standard deviations for each group
mean1 = mean(data1)
sd1 = sd(data1)
mean2 = mean(data2)
sd2 = sd(data2)
# Creating results vector
results = c(mean1, sd1, mean2, sd2, compute$statistic, compute$p.value)
# Naming the results for clarity
names(results) = c(paste("mean", trialType1, sep=" "),
paste("sd", trialType1, sep=" "),
paste("mean", trialType2, sep=" "),
paste("sd", trialType2, sep=" "),
"t_value",
"p_value")
# Returning the results with labels indicating trial type
return(results)
}
# Example function call
postTTest("People with\nInanimate Features", "Contact", "No Contact", "90 percent")

setwd("C:/Users/detbe/Documents/projects/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/7mosModelData")
people.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
20*24
20*12
dim(D)
# combine dataframes into a single 'D' data frame
D = rbind(people.100, people.90, people.80, people.70, people.60, people.50,
object.100, object.90, object.80, object.70, object.60, object.50)
dim(D)
dim(object.50)
800*12
fix(object.100)
20*12
length(rep(1:240, each = 40))
9600/2
length(rep(c("Contact", "No Contact"), each = 1,  times = 4800))
800*6
length(rep(c("People", "Objects"),
each = 4800))
length(rep(c("100 percent", "90 percent", "80 percent", "70 percent", "60 percent", "50 percent"),
each = 800, times = 2))
D = rbind(people.100, people.90, people.80, people.70, people.60, people.50,
object.100, object.90, object.80, object.70, object.60, object.50)
# get dimensionality of D
dim(D)
# create an ID column
D$ID = rep(1:240, each = 40)
# create trial type column
D$trialType = rep(c("Contact", "No Contact"), each = 1,  times = 4800)
D$trialType = as.factor(D$trialType)
# create condition column
D$condition = rep(c("People", "Objects"),
each = 4800)
D$condition = as.factor(D$condition)
# reorder levels of condition
D$condition <- factor(D$condition, levels = c("Objects",
"People"))
# create frequency column
D$frequency = rep(c("100 percent", "90 percent", "80 percent", "70 percent", "60 percent", "50 percent"),
each = 800, times = 2)
D$frequency = as.factor(D$frequency)
# create a 'looking time' column
D$lookingTime = D$V3
# remove columns and get the names of the resulting columns
D = D[,-c(1:3)]
names(D)
levels(D$frequency)
# reorder levels of the frequency variable
D$frequency <- factor(D$frequency, levels = c("100 percent",
"90 percent",
"80 percent",
"70 percent",
"60 percent",
"50 percent"))
####################
## OMNIBUS FIGURE ##
####################
# figure
condition_barplot = ggplot(D, aes(condition, lookingTime, fill=trialType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
# load libraries
library(lme4)
library(nlme)
library(boot)
library(car)
library(reshape2)
library(ggplot2)
library(ez)
library(plyr)
library(ggsignif)
library(lsr)
library(sjmisc)
library(sjstats)
library(BayesFactor)
library(foreign)
library(dplyr)
library(lattice)
library(openxlsx)
library(Hmisc)
condition_barplot = ggplot(D, aes(condition, lookingTime, fill=trialType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Looking Time") + # change the label of the y-axis
facet_wrap(~frequency, ncol=2) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 220)) +
scale_fill_manual(values = c("black", "azure3")) +
labs(fill='Test Trial')  +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.text=element_text(size=10),
legend.title = element_text(size=10),
axis.title=element_text(size=10),
strip.text = element_text(
size = 10),
axis.title.x = element_blank())
condition_barplot = ggplot(D, aes(condition, lookingTime, fill=trialType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Looking Time") + # change the label of the y-axis
facet_wrap(~frequency, ncol=3) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 220)) +
scale_fill_manual(values = c("black", "azure3")) +
labs(fill='Test Trial')  +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.text=element_text(size=10),
legend.title = element_text(size=10),
axis.title=element_text(size=10),
strip.text = element_text(
size = 10),
axis.title.x = element_blank())
##############
##############
# 4 MOS DATA #
##############
##############
setwd("C:/Users/detbe/Documents/projects/spelkeSaxeSimulationsNEW/postMS/final/JEPGeneral/revision2/supplementaryAnalyses/spelkePhillipsWoodward95/4mosModelData")
people.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
people.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.100 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.90 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.80 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.70 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.60 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
object.50 = read.table(file.choose(), header = FALSE, stringsAsFactors = FALSE)
# combine dataframes into a single 'D' data frame
D = rbind(people.100, people.90, people.80, people.70, people.60, people.50,
object.100, object.90, object.80, object.70, object.60, object.50)
# get dimensionality of D
dim(D)
# create an ID column
D$ID = rep(1:240, each = 40)
# create trial type column
D$trialType = rep(c("Contact", "No Contact"), each = 1,  times = 4800)
D$trialType = as.factor(D$trialType)
# create condition column
D$condition = rep(c("People", "Objects"),
each = 4800)
D$condition = as.factor(D$condition)
# reorder levels of condition
D$condition <- factor(D$condition, levels = c("Objects",
"People"))
# create frequency column
D$frequency = rep(c("100 percent", "90 percent", "80 percent", "70 percent", "60 percent", "50 percent"),
each = 800, times = 2)
D$frequency = as.factor(D$frequency)
# create a 'looking time' column
D$lookingTime = D$V3
# remove columns and get the names of the resulting columns
D = D[,-c(1:3)]
names(D)
# check the order of the levels of the frequency variable
levels(D$frequency)
# reorder levels of the frequency variable
D$frequency <- factor(D$frequency, levels = c("100 percent",
"90 percent",
"80 percent",
"70 percent",
"60 percent",
"50 percent"))
####################
## OMNIBUS FIGURE ##
####################
# figure
condition_barplot = ggplot(D, aes(condition, lookingTime, fill=trialType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Looking Time") + # change the label of the y-axis
facet_wrap(~frequency, ncol=3) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 220)) +
scale_fill_manual(values = c("black", "azure3")) +
labs(fill='Test Trial')  +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.text=element_text(size=10),
legend.title = element_text(size=10),
axis.title=element_text(size=10),
strip.text = element_text(
size = 10),
axis.title.x = element_blank())
# figure
condition_barplot = ggplot(D, aes(condition, lookingTime, fill=trialType)) # create the bar graph with test.trial.2 on the x-axis and measure on the y-axis
condition_barplot + stat_summary(fun = mean, geom = "bar", position = "dodge") + # add the bars, which represent the means and the place them side-by-side with 'dodge'
stat_summary(fun.data=mean_cl_boot, geom = "errorbar", position = position_dodge(width=0.90), width = 0.2) + # add errors bars
ylab("Looking Time") + # change the label of the y-axis
facet_wrap(~frequency, ncol=3) +
scale_y_continuous(expand = c(0, 0)) +
coord_cartesian(ylim=c(0, 300)) +
scale_fill_manual(values = c("black", "azure3")) +
labs(fill='Test Trial')  +
theme(axis.text.x = element_text(size = 10),
axis.text.y = element_text(size = 10),
legend.text=element_text(size=10),
legend.title = element_text(size=10),
axis.title=element_text(size=10),
strip.text = element_text(
size = 10),
axis.title.x = element_blank())
